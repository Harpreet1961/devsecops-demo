name: Devsecops Demo CI/CD
run-name: CI/CD Pipeline
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'  # Ignore changes to this file to prevent loops

jobs: 
  devsecops_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Testing
        run: echo "Running tests..."

  Test_Job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies and run tests
        run: |
          npm install
          npm test

  Static_Code_Analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2 
        with:
          node-version: '18'  
      
      - name: Run static code analysis
        run: |
          echo " Running static code analysis..."
          npm ci 
          npm run lint
  
  Build:
    runs-on: ubuntu-latest
    needs: [Static_Code_Analysis, Test_Job]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Build the application
        run: |
          echo "Building the application..."
          npm install
          npm run build     
          
  Set_repo_name:
    runs-on: ubuntu-latest
    needs: Build
    outputs:
      repo_name: ${{ steps.set_repo_name.outputs.repo_name }} 
    steps:
      - name: repo_name
        id: set_repo_name
        run: |
          echo "repo_name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          

      - name: Print Repo Name
        env:
         REPO_NAME: ${{ steps.set_repo_name.outputs.repo_name }}
        run: echo "Repo is $REPO_NAME"    
          
  Docker_Registry_Login:
   runs-on: ubuntu-latest
   needs: [Set_repo_name,Build]
   steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}  

      # - name: Login to GHCR
      #   run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # - name: Set lowercase repo name
      #   run: |
      #     echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV


      - name: Build Inventory Image
        run: |
           echo "Building Docker image..."
           docker build -t ghcr.io/${{ needs.Set_repo_name.outputs.repo_name }}/inventory:latest .
           docker build -t ghcr.io/${{ needs.Set_repo_name.outputs.repo_name }}/inventory:latest .
           docker tag ghcr.io/${{ needs.Set_repo_name.outputs.repo_name }}/inventory:latest ghcr.io/${{ needs.Set_repo_name.outputs.repo_name }}/inventory:${{ github.sha }}

      - name: Scan Image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ needs.Set_repo_name.outputs.repo_name }}/inventory:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
           

      - name: Push Inventory Image
        run: |
          echo "Pushing Docker image to GHCR..."
          docker push ghcr.io/${{ needs.Set_repo_name.outputs.repo_name }}/inventory:latest
          docker push ghcr.io/${{ needs.Set_repo_name.outputs.repo_name }}/inventory:${{ github.sha }}


  github_sha:
    runs-on: ubuntu-latest
    needs: [Docker_Registry_Login, Set_repo_name]
    steps:
      - name: Print GitHub SHA
        run: echo "GitHub SHA is ${{ github.sha }}"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: git_login
        run: |
          echo "Logging into GitHub..."
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          echo "Repo: ${{ github.repository }}"

      - name: Update deployment.yaml
        run: |
          echo "Updating image tag in deployment.yaml"
          sed -i "s|image: ghcr.io/${{ needs.Set_repo_name.outputs.repo_name }}/inventory:.*|image: ghcr.io/${{ needs.Set_repo_name.outputs.repo_name }}/inventory:${{ github.sha }}|g" kubernetes/deployment.yaml
 
          echo "Checking for changes..."
          if git diff --quiet kubernetes/deployment.yaml; then
             echo "No changes to commit."
            
           
             
          else
           echo "Changes detected. Committing..."
           git add kubernetes/deployment.yaml
           git commit -m "chore: update inventory image to ${{ github.sha }}"
           echo "Pulling latest before push to avoid conflict"
           git pull --rebase origin "${{ github.ref_name }}"

           git push origin HEAD:${{ github.ref_name }}
          fi
